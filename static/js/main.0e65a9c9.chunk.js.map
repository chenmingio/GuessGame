{"version":3,"sources":["components/Header.js","components/Player.js","components/Word.js","components/Input.js","components/Login.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","AppBar","position","Toolbar","Typography","color","name","room","Player","players","guesser","otherPlayers","filter","e","classes","playerCards","undefined","map","player","index","Grid","key","item","xs","Paper","className","paper","elevation","variant","guesserCard","container","spacing","Word","trys","hints","word","tryWords","tryWord","hintWords","hintWord","Input","send_answer","buttonWord","dialogTitle","useState","open","setOpen","answer","setAnswer","dialogContent","setDialogContent","Button","onClick","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","textField","onChange","event","value","target","DialogActions","String","Login","join_room","values","setValues","handleChange","id","label","required","set_room","set_name","useStyles","makeStyles","theme","direction","justify","alignItems","padding","root","flexGrow","marginTop","marginBottom","card","maxWidth","marginLeft","marginRight","width","socket","io","connect","document","domain","window","location","port","Main","setRoom","setName","game","setGame","console","log","emit","useEffect","title","on","gameMsg","off","size","disableElevation","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e65a9c9.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\n\nfunction Header(props) {\n    return (\n        <Fragment>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography color=\"inherit\">\n                        {props.name} in ROOM {props.room}.\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </Fragment>\n    )\n}\n\nexport default Header","import React from 'react'\nimport { Grid, Paper } from '@material-ui/core'\nimport Typography from '@material-ui/core/Typography';\n// import PaperGrid from './PaperGrid'\n\n\nexport default function Player(props) {\n\n    // data\n    const players = props.players\n    const guesser = props.guesser\n\n    // remove guesser from players as \n    var otherPlayers = players.filter(e => e !== guesser)\n\n\n    // styles\n    const classes = props.classes\n\n    // core player cards\n    const playerCards = (otherPlayers !== undefined) ?\n        (\n            otherPlayers.map(function handle_others(player, index) {\n                return (\n                    <Grid key={index} item xs={3}>\n                        <Paper className={classes.paper} elevation={1}>\n                            <Typography variant=\"h6\">\n                                {player}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                )\n            })\n        ) :\n        (\n            <Grid item xs={3}>\n                <Paper className={classes.paper} elevation={1}>\n                    <Typography variant=\"h6\">\n                        Waiting for Players...\n                </Typography>\n                </Paper>\n            </Grid>\n        )\n\n    const guesserCard = (\n        <Grid item xs={3}>\n            <Paper className={classes.paper} elevation={1}>\n                <Typography variant=\"h6\">\n                    {guesser}\n                </Typography>\n            </Paper>\n        </Grid>\n    )\n\n\n\n    return (\n        <Grid container className={classes.container} spacing={3}>\n            <Grid item xs={12}>\n                <Typography variant=\"h6\" color='primary'>\n                    Players\n                </Typography>\n            </Grid>\n            {playerCards}\n            <Grid item xs={12}>\n                <Typography variant='h6' color='primary'>\n                    Guesser\n                </Typography>\n            </Grid>\n            {guesserCard}\n        </Grid>\n\n    )\n}\n","import React from 'react'\nimport { Grid, Paper } from '@material-ui/core'\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default function Word(props) {\n\n    // data\n    const { name, guesser, trys, hints } = props\n    const word = (name === guesser) ? (\"???\") : (props.word)\n\n    // styles\n    const classes = props.classes\n\n    // core word trys zone\n    const tryWords = (trys !== undefined) ?\n        (\n            trys.map((tryWord, index) => {\n                return (\n                    <Grid key={index} item xs={3}>\n                        <Paper className={classes.paper} elevation={20}>\n                            <Typography variant=\"h6\">\n                                {tryWord}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                )\n            })\n        ) :\n        (\n            <Grid item xs={3}>\n                <Paper className={classes.paper} elevation={10}>\n                    <Typography variant=\"h6\">\n                        Wating for input...\n                </Typography>\n                </Paper>\n            </Grid>\n        )\n\n    // core word hints zone\n    const hintWords = (hints !== undefined) ?\n        (\n            hints.map((hintWord, index) => {\n                return (\n                    <Grid key={index} item xs={3}>\n                        <Paper className={classes.paper} elevation={20}>\n                            <Typography variant=\"h6\">\n                                {hintWord}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                )\n            })\n        ) :\n        (\n            <Grid item xs={3}>\n                <Paper className={classes.paper} elevation={10}>\n                    <Typography variant=\"h6\">\n                        Wating for input...\n                </Typography>\n                </Paper>\n            </Grid>\n        )\n\n    return (\n\n        <Grid container className={classes.container} spacing={3}>\n\n            <Grid item xs={12}>\n                <Typography variant=\"h6\" color='primary'>\n                    THE WORD\n            </Typography>\n            </Grid>\n            <Grid item xs={3}>\n                <Paper className={classes.paper} elevation={10}>\n                    <Typography variant=\"h6\">\n                        {word}\n                    </Typography>\n                </Paper>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"h6\" color='primary'>\n                    Hints\n            </Typography>\n            </Grid>\n            {hintWords}\n            <Grid item xs={12}>\n                <Typography variant=\"h6\" color='primary'>\n                    Trys\n            </Typography>\n            </Grid>\n            {tryWords}\n        </Grid>\n    )\n}","import React, { useState } from 'react';\nimport { Grid } from '@material-ui/core'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nexport default function Input(props) {\n\n    // data prep\n    const guesser = props.guesser\n    const name = props.name\n\n    // callback function prep\n    const send_answer = props.send_answer\n\n    // style props\n    const classes = props.classes\n\n    // display words prep\n    const buttonWord = (guesser === name) ? (\"Let Me Try\") : (\"Give Hint\")\n    const dialogTitle = (guesser === name) ? (\"Enter Your Answer\") : (\"Enter Your Hint\")\n    const [open, setOpen] = useState(false)\n\n    // handle input change\n    const [answer, setAnswer] = useState(\"\")\n    const [dialogContent, setDialogContent] = useState(\"\")\n\n    const handleChange = (event) => {\n        setDialogContent(\"\")\n        const { value } = event.target\n        setAnswer(value)\n    }\n\n\n    const handleOpenInput = () => {\n        // open the modal\n        setOpen(true)\n    }\n\n    const handleInputSubmit = () => {\n        // submit the input and close the modal\n        if (answer) {\n            setOpen(false)\n            send_answer(String(answer))\n        } else {\n            setDialogContent(\"Leave Something!\")\n        }\n    }\n\n\n\n    return (\n        <Grid container className={classes.container} spacing={3}>\n            <Button color=\"primary\" onClick={handleOpenInput}>\n                {buttonWord}\n            </Button>\n            <Dialog open={open} >\n                <DialogTitle>{dialogTitle}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {dialogContent}\n                    </DialogContentText>\n                    <TextField\n                        name=\"answer\"\n                        autoFocus\n                        className={classes.textField}\n                        onChange={handleChange}\n                        value={answer.name}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleInputSubmit} color=\"primary\">\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n        </Grid>\n\n    )\n\n}\n","import React, { Fragment, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n\nexport default function Login(props) {\n\n    const classes = props.classes\n\n    const join_room = props.join_room\n\n    const [open, setOpen] = useState(true)\n    const [values, setValues] = useState({\n        name: \"\",\n        room: \"\"\n    })\n    const [dialogContent, setDialogContent] = useState(\"\")\n\n    const handleChange = (event) => {\n        setDialogContent(\"\")\n        const { id, value } = event.target\n        setValues({\n            ...values,\n            [id]: value\n        })\n    }\n\n    const handleClick = () => {\n        const { name, room } = values\n        if (name && room) {\n            setOpen(false)\n            props.set_room(String(room))\n            props.set_name(String(name))\n            join_room(name, room)\n        } else {\n            setDialogContent(\"can't be blank!\")\n        }\n    };\n\n    return (\n        <Fragment>\n            <Dialog open={open} >\n                <DialogTitle>Enter Your Name and Room</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {dialogContent}\n                    </DialogContentText>\n                    <TextField\n                        id=\"name\"\n                        label=\"Name\"\n                        autoFocus\n                        required={true}\n                        className={classes.textField}\n                        onChange={handleChange}\n                        value={values.name}\n                    />\n                    <TextField\n                        required={true}\n                        id=\"room\"\n                        label=\"Room\"\n                        className={classes.textField}\n                        onChange={handleChange}\n                        value={values.room}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick} color=\"primary\">\n                        Join\n          </Button>\n                </DialogActions>\n            </Dialog>\n        </Fragment>\n    );\n}","import React, { useState, useEffect } from 'react'\nimport io from 'socket.io-client'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Button } from '@material-ui/core'\nimport Header from './Header'\nimport Player from './Player'\nimport Word from './Word'\nimport Input from './Input'\nimport Login from './Login'\n\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        direction: \"column\",\n        justify: \"flex-start\",\n        alignItems: \"stretch\",\n        padding: 30\n    },\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: 20, marginTop: 10, marginBottom: 10\n    },\n    card: {\n        maxWidth: 300,\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 200,\n    },\n}))\n\nvar socket = io.connect('http://' + document.domain + ':' + window.location.port)\n\n\nexport default function Main() {\n    const classes = useStyles()\n\n\n    const [room, setRoom] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [game, setGame] = useState(\n        {\n            'guesser': 'g1',\n            'hints': ['hint1', 'hint2'],\n            'players': ['p1', 'p2', 'p3', 'p4', 'p5'],\n            'room': '123',\n            'trys': ['t1', 't2'],\n            'turn': 3,\n            'word': 'sample word'\n        }\n    )\n\n    // socket emit join room msg\n    function join_room(name, room) {\n        console.log(`Some function is requesting function join_room`)\n        if (name && room) {\n            socket.emit('join', {\n                name: name,\n                room: room\n            })\n        } else {\n            console.log(\"name or room is empty\")\n        }\n    }\n\n\n    // function to execute when mounted/re-rendered\n    useEffect(() => {\n        console.log(\"hook function useEffect updated\")\n\n        document.title = `You are in Room ${room}`\n\n        // when connect, emit join to server if name/room alreday avaialbe\n        socket.on('connect', () => {\n            if (room && name) {\n                console.log(\"resubmit the name and room to server\")\n                join_room(name, room)\n            }\n        })\n\n        // when exception happend in server, server will send rejoin status to client\n        socket.on('rejoin', () => {\n            console.log(\"[rejoin] rejoin request received\")\n            console.log(`[rejoin] current name=${name} and room=${room}`)\n            join_room(name, room)\n        })\n\n        // trigger to update local player status\n        socket.on('game', (gameMsg) => {\n            setGame(gameMsg)\n            console.log(\">>> game status updated from server\")\n        })\n\n        // ummount when rerender\n        return function cleanup() {\n            console.log(\"cleanup done\")\n            socket.off(\"rejoin\")\n            socket.off(\"game\")\n            socket.off(\"connect\")\n        }\n\n    }, [name, room])\n\n    // function to emit start action to server\n    function startGame() {\n        socket.emit('game_start', room)\n    }\n\n    // callback function to send answer to server\n    function send_answer(answer) {\n        socket.emit('send_answer', answer)\n    }\n\n\n\n    return (\n        <Grid container spacing={3}>\n            <Header room={room} name={name} />\n            <Player classes={classes} guesser={game.guesser} players={game.players} />\n            <Grid container className={classes.container} spacing={3}>\n                <Grid item xs={12}>\n                    <Button size=\"large\" variant=\"contained\" color=\"primary\" disableElevation onClick={startGame}>\n                        Start Game\n                    </Button>\n                </Grid>\n            </Grid>\n            <Word classes={classes} word={game.word} trys={game.trys} hints={game.hints} guesser={game.guesser} name={name} />\n            <Input classes={classes} guesser={game.guesser} name={name} send_answer={send_answer} />\n            <Login join_room={join_room} set_room={setRoom} set_name={setName} classes={classes} />\n        </Grid>\n    )\n}\n","import React from 'react';\nimport 'typeface-roboto'\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\" >\n        <div>\n          <Main />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}